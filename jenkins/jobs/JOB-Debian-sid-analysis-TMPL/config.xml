<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <logRotator class="hudson.tasks.LogRotator">
    <daysToKeep>-1</daysToKeep>
    <numToKeep>3</numToKeep>
    <artifactDaysToKeep>-1</artifactDaysToKeep>
    <artifactNumToKeep>1</artifactNumToKeep>
  </logRotator>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.4.1">
      <useBuildBlocker>true</useBuildBlocker>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

cat &gt; PROLOGUE &lt;&lt;&quot;EOF&quot;
set -e
ulimit -S -v 24000000

# https://issues.jenkins-ci.org/browse/JENKINS-9671
if [ x$NODE_NAME = &quot;x&quot; ] ; then
  NODE_NAME=master
fi

if [ x$NODE_NAME = xmaster ] ; then
BASEDIR=$WORKSPACE/../../
export PATH=$BASEDIR/JOB-prepare-binaries-$NODE_NAME/workspace/:$PATH
GOTO_CC=debian-builds-goto-cc
GOTO_INSTRUMENT=debian-builds-goto-instrument
CBMC=debian-builds-cbmc
else
BASEDIR=$WORKSPACE/../
export PATH=$BASEDIR/JOB-prepare-binaries-slaves/label/$NODE_NAME/:$PATH
GOTO_CC=debian-builds-goto-cc
GOTO_INSTRUMENT=debian-builds-goto-instrument
CBMC=debian-builds-cbmc
fi

export LC_ALL=&quot;en_GB.UTF-8&quot;
export TMPDIR=$PWD
EOF


</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

. PROLOGUE

binaries=goto-binaries.tar.bz2
if [ x$NODE_NAME = &quot;xmaster&quot; ] ; then
  binaries=$BASEDIR/sid-goto-cc-$pkg/workspace/$binaries
fi

if [ ! -f $binaries ] ; then
  touch FAILED
  exit 0
fi
tar xjf $binaries

 # ignore files generated by dh_girepository and linking info
find goto-binaries -type f | \
  grep -v &apos;\.linked$&apos; | grep -v &apos;\.typelib\.so$&apos; &gt; goto-binaries.list
sed -i &apos;/^goto-binaries\/control/d&apos; goto-binaries.list
sed -i &apos;/^goto-binaries\/copyright/d&apos; goto-binaries.list
</command>
    </hudson.tasks.Shell>
    <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder plugin="conditional-buildstep@1.3.3">
      <condition class="org.jenkins_ci.plugins.run_condition.logic.Not" plugin="run-condition@1.0">
        <condition class="org.jenkins_ci.plugins.run_condition.core.FileExistsCondition">
          <file>FAILED</file>
          <baseDir class="org.jenkins_ci.plugins.run_condition.common.BaseDirectory$Workspace"/>
        </condition>
      </condition>
      <buildStep class="hudson.tasks.Shell">
        <command>#!/bin/bash

. PROLOGUE

export FULLVER=&quot;`grep ^Version: goto-binaries/control | awk &apos;{ print $2 }&apos;`&quot;

ifs=&quot;$IFS&quot;
IFS=&quot;
&quot;

while read f ; do
  echo &quot;To dump: $f&quot;

  /usr/bin/time -f%Us $GOTO_INSTRUMENT --show-symbol-table &quot;$f&quot; | \
    perl -w -e &apos;use strict;
      my @undecl=(); my $sym=undef;
      while(&lt;&gt;) {
        if(/^Symbol\.{6}: c::(\S+)$/) { $sym=$1; }
        elsif(defined($sym) &amp;&amp; /^Type\.{8}:(.*)$/) { $sym=undef unless ($1 eq &quot; signed int (void)&quot;); }
        elsif(defined($sym) &amp;&amp; /^Location\.{4}: (.+ function .+)$/) { push @undecl, &quot;$sym: $1&quot;; }
      }
      print &quot;$ENV{PKG} $ENV{FULLVER} MISSING PROTOTYPE: $_\n&quot; foreach (@undecl);
      exit scalar(@undecl)&gt;0 ? 1 : 0;&apos; || continue

  ff=&quot;`basename &quot;$f&quot; | sed &apos;s/@/_/g&apos;`&quot;
  if ! /usr/bin/time -f%Us $GOTO_INSTRUMENT --dump-c &quot;$f&quot; &quot;$ff.c&quot; ; then
    mkdir -p failed-binaries/
    cp &quot;$f&quot; failed-binaries/
    touch FAILED
  else
    for i in 1 2 3 4 5 6 7 8 9 ; do
      # make sure there is no &quot;irep&quot; generated anywhere
      if grep -wq &apos;irep&apos; &quot;$ff.c&quot; ; then
        sed -i &apos;s/\&lt;irep(/#irep(/&apos; &quot;$ff.c&quot;
      fi

      if ! /usr/bin/time -f%Us $GOTO_CC -std=c99 -c &quot;$ff.c&quot; ; then
        mkdir -p failed-recompile/
        cp &quot;$f&quot; &quot;$ff.c&quot; failed-recompile/
        touch FAILED
        break
      else
        echo -n &quot;$i: &quot;
        if ! /usr/bin/time -f%Us $GOTO_INSTRUMENT --dump-c &quot;$ff.o&quot; &quot;$ff.c&quot; ; then
          touch FAILED
          break
        fi
        cp &quot;$ff.c&quot; &quot;$ff.$i.c&quot;
        ib=$((i - 1))
        if [ $i -gt 1 ] ; then
          if diff &quot;$ff.$ib.c&quot; &quot;$ff.$i.c&quot; &gt; /dev/null ; then
            echo &quot;Convergence at step $ib&quot;
            break
          elif [ $i -eq 9 ] ; then
            echo &quot;No convergence after $i iterations&quot;
            mkdir -p failed-converge/
            diff -u &quot;$ff.$ib.c&quot; &quot;$ff.$i.c&quot; &gt; &quot;failed-converge/$ff.diff&quot; || true
            cp &quot;$f&quot; &quot;$ff.$ib.c&quot; failed-converge/
            sed -i &apos;/^\/\//d&apos; &quot;$ff.$ib.c&quot; &quot;$ff.$i.c&quot;
            diff -u &quot;$ff.$ib.c&quot; &quot;$ff.$i.c&quot; || true
            touch FAILED
          fi
        fi
      fi
    done

    if [ ! -f FAILED ] ; then
      if ! /usr/bin/time -f%Us $GOTO_INSTRUMENT --dump-c --use-system-headers &quot;$f&quot; &quot;$ff.c&quot; ; then
        touch FAILED
      elif ! gcc -std=c99 -c &quot;$ff.c&quot; ; then
        mkdir -p failed-recompile/
        cp &quot;$f&quot; &quot;$ff.c&quot; failed-recompile/
        # not fatal for now
        # touch FAILED
      fi
    fi
            
    rm -f &quot;$ff.c&quot; &quot;$ff.o&quot; &quot;$ff.1.c&quot; &quot;$ff.2.c&quot; &quot;$ff.3.c&quot; &quot;$ff.4.c&quot; &quot;$ff.5.c&quot; &quot;$ff.6.c&quot; &quot;$ff.7.c&quot;
    if [ -f FAILED ] ; then
      break
    fi
  fi
done &lt; goto-binaries.list
IFS=&quot;$ifs&quot;</command>
      </buildStep>
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
    </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder plugin="conditional-buildstep@1.3.3">
      <condition class="org.jenkins_ci.plugins.run_condition.logic.Not" plugin="run-condition@1.0">
        <condition class="org.jenkins_ci.plugins.run_condition.core.FileExistsCondition">
          <file>FAILED</file>
          <baseDir class="org.jenkins_ci.plugins.run_condition.common.BaseDirectory$Workspace"/>
        </condition>
      </condition>
      <buildStep class="hudson.tasks.Shell">
        <command>#!/bin/bash

. PROLOGUE

ifs=&quot;$IFS&quot;
IFS=&quot;
&quot;

while read f ; do
  echo &quot;To edit: $f&quot;
  race_check=&quot;&quot;
  # --race-check is too broken in that the points-to analysis will consume way too much memory
  # and will introduce invalid objects
  #if $GOTO_INSTRUMENT --list-symbols &quot;$f&quot; | grep -q &apos;^main void (void)$&apos; ; then
  #  race_check=&quot;--race-check&quot;
  #fi


  if ! /usr/bin/time -f%Us $GOTO_INSTRUMENT \
      --bounds-check \
      --div-by-zero-check \
      --pointer-check \
      --memory-leak-check \
      --signed-overflow-check \
      --unsigned-overflow-check \
      --undefined-shift-check \
      --nan-check \
      $race_check \
      &quot;$f&quot; &quot;$f.instr.o&quot; ; then
    touch FAILED
    break
  fi
  ff=&quot;`basename &quot;$f&quot; | sed &apos;s/@/_/g&apos;`&quot;
  if ! /usr/bin/time -f%Us $GOTO_INSTRUMENT --dump-c &quot;$f.instr.o&quot; &quot;$ff.c&quot; ; then
    touch FAILED
    break
  fi

  # make sure there is no &quot;irep&quot; generated anywhere
  if grep -wq &apos;irep&apos; &quot;$ff.c&quot; ; then
    sed -i &apos;s/\&lt;irep(/#irep(/&apos; &quot;$ff.c&quot;
  fi
  # For now we know it doesn&apos;t compile as various properties are not dumped as proper C code
  #if ! /usr/bin/time -f%Us $GOTO_CC -std=c99 -c &quot;$ff.c&quot; ; then
  #  touch FAILED
  #  break
  #fi


  rm -f &quot;$ff.c&quot; &quot;$ff.o&quot;
done &lt; goto-binaries.list
IFS=&quot;$ifs&quot;</command>
      </buildStep>
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
    </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder plugin="conditional-buildstep@1.3.3">
      <condition class="org.jenkins_ci.plugins.run_condition.logic.Not" plugin="run-condition@1.0">
        <condition class="org.jenkins_ci.plugins.run_condition.core.FileExistsCondition">
          <file>FAILED</file>
          <baseDir class="org.jenkins_ci.plugins.run_condition.common.BaseDirectory$Workspace"/>
        </condition>
      </condition>
      <buildStep class="hudson.tasks.Shell">
        <command>#!/bin/bash

. PROLOGUE

ifs=&quot;$IFS&quot;
IFS=&quot;
&quot;

while read f ; do
  echo &quot;To edit: $f&quot;

  ec=0
  /usr/bin/time -v timeout -k15 900 $GOTO_INSTRUMENT --accelerate --z3 &quot;$f.instr.o&quot; &quot;$f.instr.accel.o&quot; || ec=$?
  if [ $ec -eq 124 ] || [ $ec -eq 137 ] ; then
    rm -f &quot;$f.instr.accel.o&quot;
    echo &quot;TIMEOUT&quot;
  elif [ $ec -eq 11 ] ; then
    # Out of memory
    rm -f &quot;$f.instr.accel.o&quot;
  elif [ $ec -ne 0 ] ; then
    mkdir -p failed-accelerate
    cp &quot;$f.instr.o&quot; failed-accelerate/
    touch FAILED
    break
  fi
done &lt; goto-binaries.list
IFS=&quot;$ifs&quot;</command>
      </buildStep>
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
    </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder plugin="conditional-buildstep@1.3.3">
      <condition class="org.jenkins_ci.plugins.run_condition.logic.Not" plugin="run-condition@1.0">
        <condition class="org.jenkins_ci.plugins.run_condition.core.FileExistsCondition">
          <file>FAILED</file>
          <baseDir class="org.jenkins_ci.plugins.run_condition.common.BaseDirectory$Workspace"/>
        </condition>
      </condition>
      <buildStep class="hudson.tasks.Shell">
        <command>#!/bin/bash

. PROLOGUE

run_cbmc() {
  local arg=&quot;$1&quot;
  local opts=&quot;$2&quot;

  ec=0
  /usr/bin/time -v timeout -k15 900 $CBMC --unwind 1 --no-unwinding-assertions $opts &quot;$arg&quot; 2&gt;&amp;1 | \
    tee &quot;$arg.log&quot;
  ec=${PIPESTATUS[0]}
  if [ $ec -eq 124 ] || [ $ec -eq 137 ] ; then
    echo &quot;TIMEOUT&quot;
    ec=0
  elif [ $ec -ne 0 ] ; then
    mkdir -p failed-verify
    cp &quot;$arg&quot; failed-verify/
    touch FAILED
    break
  fi

  return $ec
}

ifs=&quot;$IFS&quot;
IFS=&quot;
&quot;

while read f ; do
  if ! $GOTO_INSTRUMENT --list-symbols &quot;$f&quot; | grep -q &apos;^main void (void)$&apos; ; then
    continue
  fi

  echo &quot;To verify: $f&quot;

  if [ -f &quot;$f.instr.accel.o&quot; ] ; then
    echo &quot;Trying accelerated binary&quot;
    run_cbmc &quot;$f.instr.accel.o&quot; &quot;--z3&quot;
  fi

  echo &quot;Non-accelerated binary&quot;
  run_cbmc &quot;$f.instr.o&quot; &quot;&quot;

done &lt; goto-binaries.list
IFS=&quot;$ifs&quot;</command>
      </buildStep>
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
    </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder plugin="conditional-buildstep@1.3.3">
      <condition class="org.jenkins_ci.plugins.run_condition.logic.Not" plugin="run-condition@1.0">
        <condition class="org.jenkins_ci.plugins.run_condition.core.FileExistsCondition">
          <file>FAILED</file>
          <baseDir class="org.jenkins_ci.plugins.run_condition.common.BaseDirectory$Workspace"/>
        </condition>
      </condition>
      <buildStep class="hudson.tasks.Shell">
        <command>#!/bin/bash

. PROLOGUE

mkdir -p cycles

ifs=&quot;$IFS&quot;
IFS=&quot;
&quot;

while read f ; do
  ff=&quot;`basename &quot;$f&quot; | sed &apos;s/@/_/g&apos;`&quot;
  if [ -e cycles/$ff ] || [ -e cycles/$ff.failed ] ; then
    i=0
    while [ -e cycles/$ff.$i ] || [ -e cycles/$ff.$i.failed ] ; do
      i=$((i + 1))
    done
    ff=&quot;$ff.$i&quot;
  fi

  echo -n &quot;`date` $f&quot;
  ec=0
  /usr/bin/time -v timeout -k15 900 static-cycles-goto-instrument --static-cycles &quot;$f&quot; &gt; cycles/$ff 2&gt;&amp;1 || ec=$?
  if [ $ec -eq 124 ] || [ $ec -eq 137 ] ; then
    echo &quot; TIMEOUT&quot;
    mv cycles/$ff cycles/$ff.failed
  elif [ $ec -eq 11 ] ; then
    # Out of memory
    echo &quot; OOM&quot;
    mv cycles/$ff cycles/$ff.failed
  elif [ $ec -ne 0 ] ; then
    echo &quot; FAILED&quot;
    tail -n 50 cycles/$ff
    touch FAILED
    break
  else
    echo &quot; OK - `grep ^Source: cycles/$ff | wc -l` cycles&quot;
  fi
done &lt; goto-binaries.list
IFS=&quot;$ifs&quot;</command>
      </buildStep>
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
    </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder plugin="conditional-buildstep@1.3.3">
      <condition class="org.jenkins_ci.plugins.run_condition.core.FileExistsCondition" plugin="run-condition@1.0">
        <file>FAILED</file>
        <baseDir class="org.jenkins_ci.plugins.run_condition.common.BaseDirectory$Workspace"/>
      </condition>
      <buildStep class="hudson.tasks.Shell">
        <command>#!/bin/bash

. PROLOGUE

[ -d goto-binaries ] || exit 0

ver=&quot;`grep ^Version: goto-binaries/control | awk &apos;{ print $2 }&apos;`&quot;

cat &lt;&lt;EOF
To: submit@bugs.debian.org
Subject: $PKG:

Package: $PKG
Version: $ver
Usertags: goto-cc

During an analysis of all Debian packages using our research compiler tool-chain
(using tools from the cbmc package) the following error was found:

http://sources.debian.net/src/$PKG/$ver/
http://packages.qa.debian.org/$PKG
EOF

rm -f smt2_dec_*
rm -rf goto-binaries goto-binaries.tar.bz2

exit 1</command>
      </buildStep>
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$DontRun" plugin="run-condition@1.0"/>
    </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
  </builders>
  <publishers>
    <hudson.plugins.ws__cleanup.WsCleanup plugin="ws-cleanup@0.22">
      <deleteDirs>false</deleteDirs>
      <skipWhenFailed>false</skipWhenFailed>
      <cleanWhenSuccess>true</cleanWhenSuccess>
      <cleanWhenUnstable>false</cleanWhenUnstable>
      <cleanWhenFailure>false</cleanWhenFailure>
      <cleanWhenNotBuilt>true</cleanWhenNotBuilt>
      <cleanWhenAborted>true</cleanWhenAborted>
      <notFailBuild>false</notFailBuild>
      <cleanupMatrixParent>false</cleanupMatrixParent>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.WsCleanup>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.22">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
    <de.jamba.hudson.plugin.wsclean.PrePostClean plugin="hudson-wsclean-plugin@1.0.4">
      <before>true</before>
      <behind>false</behind>
    </de.jamba.hudson.plugin.wsclean.PrePostClean>
    <com.michelin.cio.hudson.plugins.copytoslave.CopyToSlaveBuildWrapper plugin="copy-to-slave@1.4.3">
      <includes></includes>
      <excludes></excludes>
      <flatten>true</flatten>
      <includeAntExcludes>false</includeAntExcludes>
      <hudsonHomeRelative>false</hudsonHomeRelative>
      <relativeTo>somewhereElse</relativeTo>
    </com.michelin.cio.hudson.plugins.copytoslave.CopyToSlaveBuildWrapper>
    <EnvInjectBuildWrapper plugin="envinject@1.89">
      <info>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
    </EnvInjectBuildWrapper>
  </buildWrappers>
</project>