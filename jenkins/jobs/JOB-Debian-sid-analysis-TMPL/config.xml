<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <logRotator class="hudson.tasks.LogRotator">
    <daysToKeep>-1</daysToKeep>
    <numToKeep>3</numToKeep>
    <artifactDaysToKeep>-1</artifactDaysToKeep>
    <artifactNumToKeep>1</artifactNumToKeep>
  </logRotator>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.4.1">
      <useBuildBlocker>true</useBuildBlocker>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

set -e
ulimit -S -v 16000000

# https://issues.jenkins-ci.org/browse/JENKINS-9671
if [ x$NODE_NAME = &quot;x&quot; ] ; then
  NODE_NAME=master
fi

if [ x$NODE_NAME = xmaster ] ; then
BASEDIR=$WORKSPACE/../../
GOTO_CC=$BASEDIR/JOB-prepare-binaries-$NODE_NAME/workspace/goto-cc
GOTO_INSTRUMENT=$BASEDIR/JOB-prepare-binaries-$NODE_NAME/workspace/goto-instrument
Sources=$BASEDIR/JOB-Debian-sid/workspace/Sources
else
BASEDIR=$WORKSPACE/../
GOTO_CC=$BASEDIR/JOB-prepare-binaries-$NODE_NAME/goto-cc
GOTO_INSTRUMENT=$BASEDIR/JOB-prepare-binaries-$NODE_NAME/goto-instrument
Sources=$BASEDIR/JOB-prepare-binaries-$NODE_NAME/JOB-Debian-sid/workspace/Sources
fi

rm -rf failed-binaries failed-recompile failed-converge

dump_package() {
  pkg=$1

  G=$(grep-dctrl -S -n -s Directory,Version -r ^$pkg$ $Sources | tail -n 3)
  set -- $G
  export FULLVER=$2

  ec=0

  binaries=goto-binaries.tar.bz2
  if [ x$NODE_NAME = &quot;xmaster&quot; ] ; then
    binaries=$BASEDIR/sid-goto-cc-$pkg/workspace/$binaries
  fi

  if [ ! -f $binaries ] ; then 
    return 0
  fi
  tar xjf $binaries

do_recompile=1
ifs=&quot;$IFS&quot;
IFS=&quot;
&quot;
  find goto-binaries -type f &gt; goto-binaries.list
  while read f ; do
    if echo &quot;$f&quot; | grep -q &apos;\.linked$&apos; ; then
      continue
    # ignore files generated by dh_girepository
    elif echo &quot;$f&quot; | grep -q &apos;\.typelib\.so$&apos; ; then
      continue
    fi
    echo &quot;To dump: $f&quot;
    $GOTO_INSTRUMENT --show-symbol-table &quot;$f&quot; | \
      perl -w -e &apos;use strict;
        my @undecl=(); my $sym=undef;
        while(&lt;&gt;) {
          if(/^Symbol\.{6}: c::(\S+)$/) { $sym=$1; }
          elsif(defined($sym) &amp;&amp; /^Type\.{8}:(.*)$/) { $sym=undef unless ($1 eq &quot; signed int (void)&quot;); }
          elsif(defined($sym) &amp;&amp; /^Location\.{4}: (.+ function .+)$/) { push @undecl, &quot;$sym: $1&quot;; }
        }
        print &quot;$ENV{PKG} $ENV{FULLVER} MISSING PROTOTYPE: $_
&quot; foreach (@undecl);
        exit scalar(@undecl)&gt;0 ? 1 : 0;&apos; || continue
    ff=&quot;`basename &quot;$f&quot;`&quot;
    if ! $GOTO_INSTRUMENT --dump-c &quot;$f&quot; &quot;$ff.c&quot; ; then
      mkdir -p failed-binaries/
      cp &quot;$f&quot; failed-binaries/
      ec=1
    elif [ $do_recompile -eq 1 ] ; then
      # bug: statement expressions being lost
      # perl -p -i -e &apos;s/[#\$\w]+#array_size\d+/42/g&apos; &quot;$ff.c&quot;

      for i in 1 2 3 4 5 6 7 ; do
        # make sure there is no &quot;irep&quot; generated anywhere
        if grep -wq &apos;irep&apos; &quot;$ff.c&quot; ; then
          sed -i &apos;s/irep(/#irep(/&apos; &quot;$ff.c&quot;
        fi

        if ! $GOTO_CC -c &quot;$ff.c&quot; ; then
          mkdir -p failed-recompile/
          cp &quot;$f&quot; failed-recompile/
          cp &quot;$ff.c&quot; failed-recompile/
          ec=1
          break
        else
          echo -n &quot;$i: &quot;
          if ! $GOTO_INSTRUMENT --dump-c &quot;$ff.o&quot; &quot;$ff.c&quot; ; then
            ec=1
            break
          fi
          cp &quot;$ff.c&quot; &quot;$ff.$i.c&quot;
          ib=$((i - 1))
          if [ $i -gt 1 ] ; then
            if diff &quot;$ff.$ib.c&quot; &quot;$ff.$i.c&quot; &gt; /dev/null ; then
              echo &quot;Convergence at step $ib&quot;
              break
            elif [ $i -eq 7 ] ; then
              echo &quot;No convergence after $i iterations&quot;
              mkdir -p failed-converge/
              diff -u &quot;$ff.$ib.c&quot; &quot;$ff.$i.c&quot; &gt; &quot;failed-converge/$ff.diff&quot; || true
              cp &quot;$ff.$ib.c&quot; failed-converge/
              sed -i &apos;/^\/\//d&apos; &quot;$ff.$ib.c&quot; &quot;$ff.$i.c&quot;
              diff -u &quot;$ff.$ib.c&quot; &quot;$ff.$i.c&quot; || true
              ec=1
            fi
          fi
        fi
      done
      rm -f &quot;$ff.c&quot; &quot;$ff.o&quot; &quot;$ff.1.c&quot; &quot;$ff.2.c&quot; &quot;$ff.3.c&quot; &quot;$ff.4.c&quot; &quot;$ff.5.c&quot; &quot;$ff.6.c&quot; &quot;$ff.7.c&quot;
      if [ $ec -eq 1 ] ; then
        break
      fi
    fi
  done &lt; goto-binaries.list
  IFS=&quot;$ifs&quot;
  rm -r goto-binaries goto-binaries.list
  
  return $ec
}

dump_package $PKG</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

set -e
ulimit -S -v 16000000

# https://issues.jenkins-ci.org/browse/JENKINS-9671
if [ x$NODE_NAME = &quot;x&quot; ] ; then
  NODE_NAME=master
fi

if [ x$NODE_NAME = xmaster ] ; then
BASEDIR=$WORKSPACE/../../
GOTO_CC=$BASEDIR/JOB-prepare-binaries-$NODE_NAME/workspace/goto-cc
GOTO_INSTRUMENT=$BASEDIR/JOB-prepare-binaries-$NODE_NAME/workspace/goto-instrument
Sources=$BASEDIR/JOB-Debian-sid/workspace/Sources
else
BASEDIR=$WORKSPACE/../
GOTO_CC=$BASEDIR/JOB-prepare-binaries-$NODE_NAME/goto-cc
GOTO_INSTRUMENT=$BASEDIR/JOB-prepare-binaries-$NODE_NAME/goto-instrument
Sources=$BASEDIR/JOB-prepare-binaries-$NODE_NAME/JOB-Debian-sid/workspace/Sources
fi

instrument_dump_package() {
  pkg=$1

  G=$(grep-dctrl -S -n -s Directory,Version -r ^$pkg$ $Sources | tail -n 3)
  set -- $G
  export FULLVER=$2

  ec=0

  binaries=goto-binaries.tar.bz2
  if [ x$NODE_NAME = &quot;xmaster&quot; ] ; then
    binaries=$BASEDIR/sid-goto-cc-$pkg/workspace/$binaries
  fi

  if [ ! -f $binaries ] ; then 
    return 0
  fi
  tar xjf $binaries

do_recompile=1
ifs=&quot;$IFS&quot;
IFS=&quot;
&quot;
  find goto-binaries -type f &gt; goto-binaries.list
  while read f ; do
    if echo &quot;$f&quot; | grep -q &apos;\.linked$&apos; ; then
      continue
    # ignore files generated by dh_girepository
    elif echo &quot;$f&quot; | grep -q &apos;\.typelib\.so$&apos; ; then
      continue
    fi
    echo &quot;To edit: $f&quot;

    ff=&quot;`basename &quot;$f&quot;`&quot;
    if ! $GOTO_INSTRUMENT \
        --bounds-check \
        --div-by-zero-check \
        --pointer-check \
        --memory-leak-check \
        --signed-overflow-check \
        --unsigned-overflow-check \
        --undefined-shift-check \
        --nan-check \
        &quot;$f&quot; &quot;$ff.instr.o&quot; ; then
      ec=1
      break
    fi
    if ! $GOTO_INSTRUMENT --dump-c &quot;$ff.instr.o&quot; &quot;$ff.c&quot; ; then
      ec=1
      break
    fi

    # make sure there is no &quot;irep&quot; generated anywhere
    if grep -wq &apos;irep&apos; &quot;$ff.c&quot; ; then
      sed -i &apos;s/irep(/#irep(/&apos; &quot;$ff.c&quot;
    fi
    # For now we know it doesn&apos;t compile as various properties are not dumped as proper C code
    #if ! $GOTO_CC -c &quot;$ff.c&quot; ; then
    #  ec=1
    #  break
    #fi

        
    rm -f &quot;$ff.c&quot; &quot;$ff.o&quot; &quot;$ff.instr.o&quot;
  done &lt; goto-binaries.list
  IFS=&quot;$ifs&quot;
  rm -r goto-binaries goto-binaries.list
  
  return $ec
}

instrument_dump_package $PKG</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

# DISABLED
exit 0

set -e
ulimit -S -v 16000000

# https://issues.jenkins-ci.org/browse/JENKINS-9671
if [ x$NODE_NAME = &quot;x&quot; ] ; then
  NODE_NAME=master
fi

if [ x$NODE_NAME = xmaster ] ; then
BASEDIR=$WORKSPACE/../../
GOTO_CC=$BASEDIR/JOB-prepare-binaries-$NODE_NAME/workspace/goto-cc
GOTO_INSTRUMENT=$BASEDIR/JOB-prepare-binaries-$NODE_NAME/workspace/goto-instrument
Sources=$BASEDIR/JOB-Debian-sid/workspace/Sources
else
BASEDIR=$WORKSPACE/../
GOTO_CC=$BASEDIR/JOB-prepare-binaries-$NODE_NAME/goto-cc
GOTO_INSTRUMENT=$BASEDIR/JOB-prepare-binaries-$NODE_NAME/goto-instrument
Sources=$BASEDIR/JOB-prepare-binaries-$NODE_NAME/JOB-Debian-sid/workspace/Sources
fi

accelerate_package() {
  pkg=$1

  G=$(grep-dctrl -S -n -s Directory,Version -r ^$pkg$ $Sources | tail -n 3)
  set -- $G
  export FULLVER=$2

  ec=0

  binaries=goto-binaries.tar.bz2
  if [ x$NODE_NAME = &quot;xmaster&quot; ] ; then
    binaries=$BASEDIR/sid-goto-cc-$pkg/workspace/$binaries
  fi

  if [ ! -f $binaries ] ; then 
    return 0
  fi
  tar xjf $binaries

do_recompile=1
ifs=&quot;$IFS&quot;
IFS=&quot;
&quot;
  find goto-binaries -type f &gt; goto-binaries.list
  while read f ; do
    if echo &quot;$f&quot; | grep -q &apos;\.linked$&apos; ; then
      continue
    # ignore files generated by dh_girepository
    elif echo &quot;$f&quot; | grep -q &apos;\.typelib\.so$&apos; ; then
      continue
    fi
    echo &quot;To edit: $f&quot;

    ff=&quot;`basename &quot;$f&quot;`&quot;
    if ! $GOTO_INSTRUMENT --accelerate &quot;$f&quot; &quot;$ff.accel.o&quot; ; then
      ec=1
      break
    fi
        
    rm -f &quot;$ff.accel.o&quot;
  done &lt; goto-binaries.list
  IFS=&quot;$ifs&quot;
  rm -r goto-binaries goto-binaries.list
  
  return $ec
}

accelerate_package $PKG</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.plugins.claim.ClaimPublisher plugin="claim@2.3"/>
    <hudson.plugins.warnings.WarningsPublisher plugin="warnings@4.40">
      <healthy></healthy>
      <unHealthy></unHealthy>
      <thresholdLimit>low</thresholdLimit>
      <pluginName>[WARNINGS] </pluginName>
      <defaultEncoding></defaultEncoding>
      <canRunOnFailed>true</canRunOnFailed>
      <useStableBuildAsReference>false</useStableBuildAsReference>
      <useDeltaValues>false</useDeltaValues>
      <thresholds plugin="analysis-core@1.56">
        <unstableTotalAll></unstableTotalAll>
        <unstableTotalHigh></unstableTotalHigh>
        <unstableTotalNormal></unstableTotalNormal>
        <unstableTotalLow></unstableTotalLow>
        <failedTotalAll></failedTotalAll>
        <failedTotalHigh></failedTotalHigh>
        <failedTotalNormal></failedTotalNormal>
        <failedTotalLow></failedTotalLow>
      </thresholds>
      <shouldDetectModules>false</shouldDetectModules>
      <dontComputeNew>true</dontComputeNew>
      <doNotResolveRelativePaths>true</doNotResolveRelativePaths>
      <parserConfigurations/>
      <consoleParsers>
        <hudson.plugins.warnings.ConsoleParser>
          <parserName>goto-instrument --dump-c</parserName>
        </hudson.plugins.warnings.ConsoleParser>
      </consoleParsers>
    </hudson.plugins.warnings.WarningsPublisher>
    <hudson.plugins.ws__cleanup.WsCleanup plugin="ws-cleanup@0.20">
      <deleteDirs>false</deleteDirs>
      <skipWhenFailed>false</skipWhenFailed>
      <cleanWhenSuccess>true</cleanWhenSuccess>
      <cleanWhenUnstable>false</cleanWhenUnstable>
      <cleanWhenFailure>false</cleanWhenFailure>
      <cleanWhenNotBuilt>true</cleanWhenNotBuilt>
      <cleanWhenAborted>true</cleanWhenAborted>
      <notFailBuild>false</notFailBuild>
      <cleanupMatrixParent>false</cleanupMatrixParent>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.WsCleanup>
  </publishers>
  <buildWrappers>
    <de.jamba.hudson.plugin.wsclean.PrePostClean plugin="hudson-wsclean-plugin@1.0.4">
      <before>true</before>
      <behind>false</behind>
    </de.jamba.hudson.plugin.wsclean.PrePostClean>
    <com.michelin.cio.hudson.plugins.copytoslave.CopyToSlaveBuildWrapper plugin="copy-to-slave@1.4.3">
      <includes></includes>
      <excludes></excludes>
      <flatten>true</flatten>
      <includeAntExcludes>false</includeAntExcludes>
      <hudsonHomeRelative>false</hudsonHomeRelative>
      <relativeTo>somewhereElse</relativeTo>
    </com.michelin.cio.hudson.plugins.copytoslave.CopyToSlaveBuildWrapper>
    <EnvInjectBuildWrapper plugin="envinject@1.89">
      <info>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
    </EnvInjectBuildWrapper>
  </buildWrappers>
</project>